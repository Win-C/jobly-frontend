App -> { NavBar, Routes } -> Landing Page -> { signUpForm, LoginForm }

- NavBar Component

- Routes Component

- Landing Component: 
    - Prop: None 
    - State: 
        - isLoggedIn: Boolean and defaults to false if no user token from backend
    - if isLoggedIn
        - if history exists, then show CompanyList page
        - if no history, then show welcome back message 
    - else
        - show log in or sign up buttons 

- SignUpForm Component: Shows sign up form for user
    - Prop: handleSubmit() fn from 
    - State: formData
    - After successful submit, redirect to CompanyList page

- LogInForm Component: Shows sign up form for user
    - Prop: handleSubmit() fn from 
    - State: formData
    - After successful submit, redirect to CompanyList page

{ SignUpForm, LogInForm } on Redirect -> (either Job or Company) List 

List Component:
    - Prop: useParams()
    - if that is company or if it job 

List -> { CompanyList, JobList }

{ SignUpForm, LogInForm } on Redirect -> CompanyList

- CompanyList Component (Companies Page):
    - Prop: [something related to the user]
    - State:
        - searchTerm: user inputs for companies search, default to showing all companies
        - companies: array of object all companies from database, initial []
            - [{ companyHandle, companyName, etc.}]
        - isLoading: Boolean to show isLoading message
    - useEffect: 
        - get all companies, updating filteredCompanies to an array of objects from db, only run once
    - when searchTerm is updated, going to update filteredCompanies 
    - fiteredCompanies is derived from the companies

CompanyList -> { SearchBar, Company }

- SearchBar:
    - Prop: handleSearch fn passed by the parent (CompanyList or JobList)
    - state: formData

- Company:
    - Prop: company object { companyHandle, companyName, etc.}
    - presentational only 
    - Link to CompanyJobs component

Company -> CompanyJobs -> Job

- CompanyJobs Component:
    - Prop: company object { companyHandle, companyName, jobs, etc.}
    - State: 
        - jobList, array of object all jobs for that company from database, initial []
            - [{ [fields] etc.}]
        - isLoading: Boolean to show isLoading message
        - isApplied: object with key of jobid and status of applied jobs for the user
    - handleApply
        - update isApplied array
        - useEffect: to update the the db 
    - useEffect (on first render);
        - get all jobs for this company, dependency on empty array

- Job Component:
    - Prop: 
        - job object { [jobid, fields], etc.}
        - isApplied object
        - handleApply fn from the parent
    - handle the apply button being clicked
    - using isApplied object, show button or faded button with no listener

JobList -> { SearchBar, Job }

JobList Component:
    - Prop: [something related to the user to get applied]
    - State:
        - searchTerm: user inputs for jobs search, default to showing all jobs
        - jobs: array of object all jobs from database, initial []
            - [{ job_id, etc.}]
        - isLoading: Boolean to show isLoading message
    - useEffect: 
        - get all jobs, updating filteredJobs to an array of objects from db, only run once
    - when searchTerm is updated, going to update filteredJobs
    - fiteredJobs is derived from jobs

Profile -> ProfileForm

Profile Component:
    - prop: user information

ProfileForm
    - prop: 
        - handleProfileUpdate fn from parent
    - state: formData
    
